# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  """token"""
  token: String!

  """user"""
  user: [User!]!
}

type Car {
  _id: String

  """Brand of car"""
  brand: String

  """Car color"""
  color: String
  createdAt: DateTime

  """Car model"""
  model: String

  """Places"""
  nbPace: Float

  """Car registration number"""
  registrationNumber: String
  updatedAt: DateTime
  user: User!

  """User id"""
  userId: String

  """Car year"""
  year: String
}

type CheckPhonePayload {
  """is registered"""
  alreadyRegistered: Boolean!

  """phone"""
  phone: String!
}

type City {
  _id: String
  createdAt: DateTime

  """Name of city"""
  label: String!

  """Latitude"""
  latitude: String

  """Longitude"""
  longitude: String
  updatedAt: DateTime
}

input CreateCarInput {
  _id: String

  """Brand of car"""
  brand: String

  """Car color"""
  color: String

  """Car model"""
  model: String

  """Places"""
  nbPace: Float

  """Car registration number"""
  registrationNumber: String

  """User id"""
  userId: String

  """Car year"""
  year: String
}

input CreateCityInput {
  """Name of city"""
  label: String!

  """Latitude"""
  latitude: String

  """Longitude"""
  longitude: String
}

input CreateMessageInput {
  content: String!
  receiverID: String!
}

input CreateTrajetInput {
  """fromCityID """
  fromCityID: String!

  """Price"""
  price: Float!

  """Travel start date"""
  startDate: DateTime!

  """toCityID"""
  toCityID: String!
}

input CreateTravelInput {
  _id: String

  """number of user"""
  nbPlace: Float!

  """TrajetID"""
  trajetID: String!
}

input CreateUserInput {
  """user avaar"""
  avatar: String

  """national identity card"""
  cni: String

  """driversLicense"""
  driversLicense: String

  """User email"""
  email: String

  """Firstname"""
  firstname: String!

  """gray card"""
  grayCard: String

  """Lastname"""
  lastname: String!

  """User password"""
  password: String!

  """User phone"""
  phone: String!

  """technical visit"""
  technicalVisit: String

  """User type"""
  typeId: String
}

input CreateUserTypeInput {
  """label"""
  label: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Message {
  _id: String
  content: String
  createdAt: DateTime
  readed: Boolean!
  receiver: User!
  receiverID: String
  updatedAt: DateTime
  user: User!
  userID: String
}

type Mutation {
  addUserType(createUserTypeInput: CreateUserTypeInput!): UserType!
  addVerifyPhone(phone: String!): PhoneVerifyEntity!
  confirmTravel(travelID: String!): Travel!
  createCar(createCarInput: CreateCarInput!): Car!
  createCity(createCityInput: CreateCityInput!): City!
  createMessage(createMessageInput: CreateMessageInput!): Message!
  createTrajet(createTrajetInput: CreateTrajetInput!): Trajet!
  createTravel(createTravelInput: CreateTravelInput!): Travel!
  createUser(createUserInput: CreateUserInput!): User!
  dropUser(userId: String!): Boolean!
  login(password: String!, username: String!): AuthPayload!
  updateUser(input: UpdateUserInput!): User!
  verifyPhone(code: String!, phone: String!): PhoneVerifyEntity!
}

type PhoneVerifyEntity {
  _id: String
  code: String!
  createdAt: DateTime
  phone: String!
  updatedAt: DateTime
  verified: Boolean!
}

type Query {
  checkUser(phone: String!): CheckPhonePayload!
  getCars: [Car!]!
  getCities: [City!]!
  getMessages: [Message!]!
  getMyMessages: [Message!]!
  getMyTrajets: [Trajet!]!
  getMyTravels: [Travel!]!
  getTrajets: [Trajet!]!
  getTravels: [Travel!]!
  getUserTypes: [UserType!]!
  getUsers: [User!]!
  me: [User!]!
  requestAllPhoneVerify: [PhoneVerifyEntity!]!
}

type Subscription {
  messageSended(receiverID: String!): Message!
}

type Trajet {
  _id: String

  """Car"""
  car: Car!

  """carID """
  carID: String!
  createdAt: DateTime

  """City Model"""
  from: City!

  """fromCityID """
  fromCityID: String!

  """Number of seats occupied"""
  nbPlaceOccupied: Float!

  """Price"""
  price: Int!

  """Travel start date"""
  startDate: DateTime!

  """City Model"""
  to: City!

  """toCityID"""
  toCityID: String!
  updatedAt: DateTime

  """User (Intance of user)"""
  user: User!

  """userId"""
  userId: String!
}

type Travel {
  _id: String

  """Accepted"""
  accepted: Boolean!
  createdAt: DateTime

  """number of user"""
  nbPlace: Float!

  """Travel (Instance of user)"""
  trajet: Trajet

  """TrajetID"""
  trajetID: String!
  updatedAt: DateTime

  """User"""
  user: User

  """UserID"""
  userID: String!
}

input UpdateUserInput {
  """Avatar"""
  avatar: String

  """national identity card"""
  cni: String

  """driversLicense"""
  driversLicense: String

  """User email"""
  email: String

  """Firstname"""
  firstname: String

  """gray card"""
  grayCard: String

  """Lastname"""
  lastname: String

  """User password"""
  password: String

  """User phone"""
  phone: String

  """technical visit"""
  technicalVisit: String

  """User type"""
  typeId: String
}

type User {
  _id: String

  """User Avatar"""
  avatar: String

  """national identity card"""
  cni: String
  createdAt: DateTime

  """driversLicense"""
  driversLicense: String

  """User email"""
  email: String

  """Firstname"""
  firstname: String!

  """gray card"""
  grayCard: String

  """Lastname"""
  lastname: String!

  """User password"""
  password: String!

  """User phone"""
  phone: String!

  """technical visit"""
  technicalVisit: String

  """User type id"""
  typeId: String
  updatedAt: DateTime

  """User Type"""
  userType: UserType

  """Verified"""
  verified: String
}

type UserType {
  _id: String
  createdAt: DateTime

  """label"""
  label: String
  updatedAt: DateTime
}